Users Module
	UsersTable
	UserRolesTable
	
Department Module
	-Only admin can crud department record

Projects Module
	-Only Manager can crud projects record

Positions Module
	-Only Manger can crud projects record

Activity Module

ProductivityModule
	-Only Admin can crud Productivity
	
	
Members Module
	Only manager can 
	
Projects
  -Department
  -Productivity
  -Members
  
 create table users(
	id int primary key auto_increment not null,
	email varchar(255) unique,
	fname varchar(255) not null,
	lname varchar(255) not null,
	password varchar(255) not null,
	created dateTime not null,
	updated dateTime,
	deleted dateTime
);
create table user_roles(
	id int primary key auto_increment not null,
	role enum('Admin','Manager','Team Leader') default 'Manager' not null,
	user_id int not null,
	created dateTime not null,
	updated dateTime,
	deleted dateTime,
	foreign key(user_id) references users(id)
); 
 
  
 create table departments(
	id int auto_increment not null primary key,
	dept_name varchar(255) not null,
	created datetime not null,
	updated datetime,
	deleted datetime
 ); 
  
 create table projects(
	id int not null auto_increment primary key,
	proj_name varchar(255) not null,
	created datetime not null,
	updated datetime,
	deleted datetime
 );
 
 create table positions(
	id int auto_increment not null primary key,
	pos_name varchar(255) not null,
	created datetime not null,
	updated datetime,
	deleted datetime
 );
 
 create table members(
	id int not null auto_increment primary key,
	name varchar(255) not null,
	start_date datetime not null,
	created datetime not null,
	updated datetime,
	deleted datetime
 );
 
  create table productivity(
	id int auto_increment not null primary key,
	exp_type enum('Beginner','Moderate','Expererience') default 'Beginner' not null,
	prod_val tinyint not null default 1,
	created datetime not null,
	updated datetime,
	deleted datetime
 );
 
 -- normalize tables
 create table department_projects(
	id int not null auto_increment primary key,
	dep_id int not null,
	proj_id int not null,
	created datetime not null,
	updated datetime,
	deleted datetime,
	foreign key(dep_id) references departments(id),
	foreign key(proj_id) references projects(id)
 );

create table dept_proj_members(
	id int not null auto_increment primary key unique,
	dept_proj_id int not null,
	pos_id int not null,
	mem_id int not null,
	created datetime not null,
	updated datetime,
	deleted datetime,
	foreign key(dep_proj_id) references department_projects(id),
	foreign key(pos_id) references positions(id),
	foreign key(mem_id) references members(id)
);




-- _proc_getDepartments

BEGIN
	SELECT d.id,d.dept_name as'name',d.created,d.updated,d.deleted
	  FROM departments d;
END

 -- _procDeptProjects

 BEGIN
	SELECT dp.id,dp.created,dp.updated,dp.deleted,
			 d.id,d.dept_name as 'name',d.created,d.updated,d.deleted,
			 p.id,p.proj_name as 'name',p.created,p.updated,p.deleted
	  FROM department_projects dp
	  JOIN departments d ON dp.dep_id = d.id
	  JOIN projects p ON dp.proj_id = p.id;
 END

-- _proc_getMembers
BEGIN
	SELECT * 
	  FROM members m;


 -- _proc_getPositions
BEGIN
	SELECT p.id,p.pos_name as 'name',p.created,p.updated,p.deleted
	FROM positions p;
END

-- _proc_getProjects

BEGIN
	SELECT p.id,p.proj_name as 'name',p.created,p.updated,p.deleted
	  FROM projects p; 
END

_proc_getUserRoles
BEGIN
	SELECT ur.id,ur.role
	  FROM user_roles ur
	  WHERE ur.user_id = id;
END

_proc_getUsers
BEGIN
	SELECT u.id,u.email,u.fname,u.lname,u.created,u.updated,u.deleted
	  FROM users u;
END